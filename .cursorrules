# NKU-Wiki 项目规范

欢迎来到 NKU-Wiki 项目！为了保证代码质量和开发效率，我们将所有的开发规范、最佳实践和工作流都进行了文档化。

原有的 `.cursorrules` 文件已被模块化拆分，以提高可读性和可维护性。请根据您关心的主题，查阅以下位于 `.cursor/rules/` 目录下的具体规范文档：

- **[项目总览](./.cursor/rules/overview.mdc)**
  - 了解项目目标、技术栈、目录结构和核心功能模块。
- **[编码与UI规范](./.cursor/rules/style-guide.mdc)**
  - 遵循统一的命名、代码风格、颜色管理及组件开发规范。
- **[开发实践与工作流](./.cursor/rules/practices.mdc)**
  - 查看性能优化、布局规范、API 对接、状态管理、Git 工作流等核心实践。

**请在开始开发前，务必熟悉与您工作内容相关的规范文档。**

**禁止自己运行npm run dev编译，你只需要改代码**

---
## 核心规范摘要

### 项目总览 (overview.mdc)
- **目标**: 使用 Taro 框架构建高质量的微信小程序。
- **技术栈**: Taro 4.x, React, Redux, TypeScript, SCSS。
- **核心依赖**: 项目依赖 `@tarojs/plugin-framework-react`, `@tarojs/plugin-platform-weapp`, `babel-preset-taro` 等核心插件。
- **目录结构**: 遵循官方推荐，对 `src` 目录进行精细化划分 (`assets`, `components`, `constants`, `pages`, `services`, `store`, `types`)。
- **核心模块**: 首页、探索、发现、我的。

### 编码规范 (style-guide.mdc)
- **命名**: 目录和非组件文件用 `kebab-case`，React 组件用 `PascalCase`，变量和函数用 `camelCase`，常量用 `UPPER_SNAKE_CASE`。
- **TypeScript**: 开启 `strict` 模式，明确类型定义，优先使用 `interface`。
- **React**: 全面使用函数式组件和 Hooks，使用 `useMemo`/`useCallback` 优化性能，自定义 Hooks 以 `use` 开头。
- **SCSS (强制)**: 必须使用 `*.module.scss`，全局样式写入 `src/app.scss`，使用 `px` 单位（Taro会自动转换为rpx）。
- **颜色管理 (强制)**: 严禁硬编码颜色。SCSS 中使用 `src/styles/variables.scss` 的变量，TS 中使用 `src/constants/colors.ts` 的常量。
- **组件开发**: 优先使用微信原生组件库，其次才是Taro UI，自定义组件放在 `src/components`，样式使用 `.module.scss`。
- **UI/UX**: 设计风格追求简洁、卡片式布局，多采用圆角、留白和阴影。

### 最佳实践 (practices.mdc)
- **性能优化**: 积极采用分包加载、图片压缩、虚拟列表等技术，并使用 `webpack-bundle-analyzer` 分析包体积。
- **布局 (强制)**: 所有页面必须使用 `<CustomHeader>` + `<ScrollView>` 的“防内容遮挡”顶级布局结构。
- **安全区域 (强制)**: 禁止在自定义导航栏右上角区域放置任何可交互控件。
- **图标 (强制)**: 所有图标必须是本地资源，存放于 `src/assets`。
- **API 对接工作流 (强制)**: 严格遵循“读文档 -> 定义类型 -> 创建 Service -> 创建 Thunk -> 组件使用”的五步流程。
- **状态管理**: 选用 Redux Toolkit (RTK)，在 `src/store/slices` 中组织 `slice` 文件。接口请求通过 `createAsyncThunk` 更新 store，使用 `redux-persist` 持久化关键数据。
- **Git 工作流**: 采用 `Git Flow` 模型，Commit Message 遵循 `Angular` 规范（推荐使用 `commitizen`），并使用 `Husky` + `lint-staged` 保证代码质量。
- **代码测试**: 使用 `Jest` 和 `@tarojs/test-utils-react` 进行单元测试，测试文件以 `.spec.ts` 结尾。
- **核心重构任务**: 参考 `nkuwiki-app/` 项目，将 Next.js 实现（HTML 标签, Tailwind, `lucide-react`）翻译为 Taro 规范（Taro 组件, SCSS, 本地 SVG）。
