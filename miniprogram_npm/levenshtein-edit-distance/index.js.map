{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nmodule.exports = levenshtein\n\nvar cache = []\nvar codes = []\n\nfunction levenshtein(value, other, insensitive) {\n  var length\n  var lengthOther\n  var code\n  var result\n  var distance\n  var distanceOther\n  var index\n  var indexOther\n\n  if (value === other) {\n    return 0\n  }\n\n  length = value.length\n  lengthOther = other.length\n\n  if (length === 0) {\n    return lengthOther\n  }\n\n  if (lengthOther === 0) {\n    return length\n  }\n\n  if (insensitive) {\n    value = value.toLowerCase()\n    other = other.toLowerCase()\n  }\n\n  index = 0\n\n  while (index < length) {\n    codes[index] = value.charCodeAt(index)\n    cache[index] = ++index\n  }\n\n  indexOther = 0\n\n  while (indexOther < lengthOther) {\n    code = other.charCodeAt(indexOther)\n    result = distance = indexOther++\n    index = -1\n\n    while (++index < length) {\n      distanceOther = code === codes[index] ? distance : distance + 1\n      distance = cache[index]\n      cache[index] = result =\n        distance > result\n          ? distanceOther > result\n            ? result + 1\n            : distanceOther\n          : distanceOther > distance\n          ? distance + 1\n          : distanceOther\n    }\n  }\n\n  return result\n}\n"]}