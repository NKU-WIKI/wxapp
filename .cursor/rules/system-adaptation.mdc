---
description: 
globs: 
alwaysApply: true
---
# 微信小程序系统适配规范

## 概述

本文档定义了 nkuwiki 项目的三层系统适配架构，解决了不同设备的导航栏适配问题，实现了零配置、精确适配的目标。

## 适配架构设计

### 三层架构概述

项目采用三层系统适配架构：

1. **全局信息中心 (app.js)** - 基于胶囊按钮精确计算系统信息
2. **Behavior适配层 (systemAdaptBehavior)** - 提供便利方法和自动注入
3. **组件实现层 (nav-bar)** - 自给自足的导航栏组件

### 架构优势

- **零配置使用** - 页面无需手动计算任何偏移量
- **精确适配** - 基于胶囊按钮位置的精确计算  
- **统一标准** - 所有页面使用相同的适配数据源
- **自给自足** - nav-bar组件自动处理占位和定位

## 第一层：全局信息中心 (app.js)

### 核心计算逻辑

```javascript
App({
  globalData: {
    systemInfo: null,
    navBarHeight: 44,
    statusBarHeight: 20,
    totalNavHeight: 64
  },

  onLaunch() {
    this.initSystemInfo();
  },

  initSystemInfo() {
    try {
      const windowInfo = wx.getWindowInfo();
      const capsule = wx.getMenuButtonBoundingClientRect();
      
      // 精确计算导航栏高度
      // 公式：(胶囊top - 状态栏高度) * 2 + 胶囊高度
      const statusBarHeight = windowInfo.statusBarHeight || 20;
      const navBarHeight = (capsule.top - statusBarHeight) * 2 + capsule.height;
      const totalNavHeight = statusBarHeight + navBarHeight;

      this.globalData.systemInfo = {
        statusBarHeight,
        navBarHeight,
        totalNavHeight,
        capsule,
        windowInfo
      };
      
      console.debug('系统信息初始化完成', this.globalData.systemInfo);
    } catch (err) {
      console.error('系统信息初始化失败', err);
      // 提供兜底数据
      this.globalData.systemInfo = {
        statusBarHeight: 20,
        navBarHeight: 44,
        totalNavHeight: 64
      };
    }
  }
});
```

### 计算原理

基于微信小程序胶囊按钮的位置计算导航栏高度：

```
胶囊按钮位置示意图：
┌─────────────────────────────┐
│        状态栏               │ ← statusBarHeight
├─────────────────────────────┤
│  上边距  ┌─────────┐  上边距  │
│         │ 胶囊按钮 │         │ ← navBarHeight = (capsule.top - statusBarHeight) * 2 + capsule.height
│  下边距  └─────────┘  下边距  │
└─────────────────────────────┘
```

### 数据导出

提供统一的系统信息获取接口：

```javascript
// utils/system.js
function getSystemInfo() {
  const app = getApp();
  return app.globalData.systemInfo || {
    statusBarHeight: 20,
    navBarHeight: 44,
    totalNavHeight: 64
  };
}
```

## 第二层：Behavior适配层

### systemAdaptBehavior 实现

```javascript
// behaviors/systemAdaptBehavior.js
const { getSystemInfo } = require('../utils/index');

module.exports = Behavior({
  data: {
    // 系统适配信息（使用_前缀避免渲染）
    _systemInfo: null,
    statusBarHeight: 20,
    navBarHeight: 44,
    totalNavHeight: 64
  },

  lifetimes: {
    attached() {
      // 自动注入系统适配信息
      this._injectSystemInfo();
    }
  },

  methods: {
    /**
     * 注入系统适配信息
     * @private
     */
    _injectSystemInfo() {
      const systemInfo = getSystemInfo();
      this.setData({
        _systemInfo: systemInfo,
        statusBarHeight: systemInfo.statusBarHeight,
        navBarHeight: systemInfo.navBarHeight,
        totalNavHeight: systemInfo.totalNavHeight
      });
    },

    /**
     * 获取适配样式对象
     * @returns {Object} 适配样式
     */
    getAdaptedStyle() {
      const { statusBarHeight, navBarHeight, totalNavHeight } = this.data;
      return {
        statusBarHeight: `${statusBarHeight}px`,
        navBarHeight: `${navBarHeight}px`,
        totalNavHeight: `${totalNavHeight}px`,
        contentTop: `${totalNavHeight}px`
      };
    },

    /**
     * 计算相对导航栏的位置
     * @param {number} offset 额外偏移量
     * @returns {string} CSS位置值
     */
    calculatePositionFromNavBar(offset = 0) {
      const { totalNavHeight } = this.data;
      return `${totalNavHeight + offset}px`;
    },

    /**
     * 获取安全区域样式
     * @param {number} extraPadding 额外内边距
     * @returns {Object} 安全区域样式
     */
    getSafeAreaStyle(extraPadding = 0) {
      const { totalNavHeight } = this.data;
      return {
        paddingTop: `${totalNavHeight + extraPadding}px`
      };
    }
  }
});
```

### 使用方法

所有页面都必须包含此behavior：

```javascript
Page({
  behaviors: [
    behaviors.baseBehavior,
    behaviors.systemAdaptBehavior  // 必须包含
  ],

  onLoad() {
    // 系统适配信息自动注入，无需手动处理
    console.log('导航栏高度:', this.data.totalNavHeight);
  },

  onNeedPosition() {
    // 如果需要计算位置，使用提供的方法
    const dropdownTop = this.calculatePositionFromNavBar(10);
    this.setData({ dropdownTop });
  }
});
```

## 第三层：组件实现层

### nav-bar 组件实现

```javascript
// components/nav-bar/nav-bar.js
Component({
  behaviors: [require('../../behaviors/systemAdaptBehavior')],

  options: {
    addGlobalClass: true,
    pureDataPattern: /^_/
  },

  properties: {
    title: {
      type: String,
      value: ''
    },
    fixed: {
      type: Boolean,
      value: true
    },
    showBack: {
      type: Boolean,
      value: true
    },
    showHome: {
      type: Boolean,
      value: false
    },
    showAvatar: {
      type: Boolean,
      value: false
    },
    showNotification: {
      type: Boolean,
      value: false
    },
    textColor: {
      type: String,
      value: '#000000'
    },
    bgColor: {
      type: String,
      value: '#ffffff'
    }
  },

  lifetimes: {
    ready() {
      // 通知父组件导航栏高度
      this._notifyNavBarHeight();
    }
  },

  methods: {
    /**
     * 通知父组件导航栏高度
     * @private
     */
    _notifyNavBarHeight() {
      const { totalNavHeight } = this.data;
      this.triggerEvent('navbarheight', { 
        height: totalNavHeight 
      });
    },

    /**
     * 返回按钮点击
     */
    onBack() {
      wx.navigateBack();
    },

    /**
     * 首页按钮点击
     */
    onHome() {
      wx.reLaunch({
        url: '/pages/index/index'
      });
    },

    /**
     * 头像点击
     */
    onAvatar() {
      this.triggerEvent('avatar');
    },

    /**
     * 通知按钮点击
     */
    onNotification() {
      wx.navigateTo({
        url: '/pages/notification/notification'
      });
    }
  }
});
```

### nav-bar 组件模板

```xml
<!-- components/nav-bar/nav-bar.wxml -->
<view class="nav-bar {{fixed ? 'nav-bar--fixed' : ''}}" 
      style="background-color: {{bgColor}};">
  
  <!-- 状态栏占位 -->
  <view class="nav-bar__status-bar" 
        style="height: {{statusBarHeight}}px;"></view>
  
  <!-- 导航栏内容 -->
  <view class="nav-bar__content" 
        style="height: {{navBarHeight}}px; color: {{textColor}};">
    
    <!-- 左侧按钮区 -->
    <view class="nav-bar__left">
      <button wx:if="{{showBack}}" 
              class="nav-bar__btn" 
              bindtap="onBack">
        <icon name="back" size="24" color="{{textColor}}" />
      </button>
      
      <button wx:if="{{showHome}}" 
              class="nav-bar__btn" 
              bindtap="onHome">
        <icon name="home" size="24" color="{{textColor}}" />
      </button>
    </view>
    
    <!-- 标题区 -->
    <view class="nav-bar__title">{{title}}</view>
    
    <!-- 右侧按钮区 -->
    <view class="nav-bar__right">
      <button wx:if="{{showAvatar}}" 
              class="nav-bar__btn" 
              bindtap="onAvatar">
        <icon name="profile" size="24" color="{{textColor}}" />
      </button>
      
      <button wx:if="{{showNotification}}" 
              class="nav-bar__btn" 
              bindtap="onNotification">
        <icon name="notification" size="24" color="{{textColor}}" />
      </button>
    </view>
  </view>
</view>

<!-- 固定定位时的占位元素 -->
<view wx:if="{{fixed}}" class="nav-bar__placeholder" 
      style="height: {{totalNavHeight}}px;"></view>
```

### nav-bar 组件样式

```css
/* components/nav-bar/nav-bar.wxss */
.nav-bar {
  width: 100%;
  z-index: 1000;
}

.nav-bar--fixed {
  position: fixed;
  top: 0;
  left: 0;
}

.nav-bar__status-bar {
  width: 100%;
}

.nav-bar__content {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 32rpx;
  position: relative;
}

.nav-bar__left,
.nav-bar__right {
  display: flex;
  align-items: center;
  min-width: 100rpx;
}

.nav-bar__right {
  justify-content: flex-end;
}

.nav-bar__title {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  font-size: 36rpx;
  font-weight: 600;
  max-width: 400rpx;
  text-align: center;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.nav-bar__btn {
  width: 64rpx;
  height: 64rpx;
  display: flex;
  align-items: center;
  justify-content: center;
  background: transparent;
  border: none;
  padding: 0;
  margin: 0 8rpx;
}

.nav-bar__btn::after {
  display: none;
}

.nav-bar__placeholder {
  width: 100%;
}
```

## 使用规范

### 1. 页面标准结构

```javascript
// 页面 JS
Page({
  behaviors: [
    behaviors.baseBehavior,
    behaviors.systemAdaptBehavior  // 必须包含
  ],

  onLoad() {
    // 无需手动处理系统适配
  }
});
```

```xml
<!-- 页面 WXML -->
<view class="page-container">
  <nav-bar 
    title="页面标题"
    fixed="{{true}}"
    showBack="{{true}}"
  />
  
  <view class="page-content">
    <!-- 页面内容 -->
  </view>
</view>
```

```css
/* 页面 WXSS */
.page-container {
  min-height: 100vh;
}

.page-content {
  /* 无需设置padding-top，nav-bar的placeholder会自动处理 */
}
```

### 2. 组件引入声明

```json
{
  "navigationBarTitleText": "页面标题",
  "usingComponents": {
    "nav-bar": "/components/nav-bar/nav-bar"
  }
}
```

## 禁止的做法

### ❌ 错误示例

```javascript
// 不要手动计算系统信息
onLoad() {
  const systemInfo = wx.getSystemInfoSync();  // ❌
  const statusBarHeight = systemInfo.statusBarHeight;  // ❌
  this.setData({ statusBarHeight });  // ❌
}

// 不要手动添加适配方法
initSystemInfo() {  // ❌
  // 手动计算逻辑
}
```

```xml
<!-- 不要手动设置margin-top -->
<view style="margin-top: {{statusBarHeight}}px;">  ❌
  <!-- 内容 -->
</view>

<!-- 不要自定义导航栏 -->
<view class="custom-nav-bar">  ❌
  <!-- 自定义导航栏内容 -->
</view>
```

### ✅ 正确示例

```javascript
// 使用systemAdaptBehavior
Page({
  behaviors: [
    behaviors.baseBehavior,
    behaviors.systemAdaptBehavior  // ✅
  ]
});
```

```xml
<!-- 使用nav-bar组件 -->
<nav-bar title="页面标题" fixed="{{true}}" />  ✅
```

## 最佳实践

### 1. 开发检查清单

- [ ] 页面已添加 `systemAdaptBehavior`
- [ ] 使用 `nav-bar` 组件而非自定义导航栏
- [ ] nav-bar 设置 `fixed="{{true}}"`
- [ ] 没有手动计算状态栏高度
- [ ] 没有手动设置 margin-top

### 2. 调试技巧

```javascript
// 调试系统适配信息
onLoad() {
  console.log('系统适配信息:', {
    statusBarHeight: this.data.statusBarHeight,
    navBarHeight: this.data.navBarHeight,
    totalNavHeight: this.data.totalNavHeight
  });
}
```

### 3. 特殊情况处理

如果需要获取系统信息用于特殊布局：

```javascript
// 使用behavior提供的方法
onNeedCalculatePosition() {
  const dropdownStyle = this.getAdaptedStyle();
  const customPosition = this.calculatePositionFromNavBar(20);
  
  this.setData({
    dropdownStyle: `top: ${customPosition}`
  });
}
```

## 技术原理

### 为什么基于胶囊按钮计算？

1. **精确性**: 胶囊按钮位置由系统决定，最准确反映导航栏布局
2. **兼容性**: 适配所有iOS和Android设备
3. **稳定性**: 不受微信版本更新影响

### 计算公式推导

```
设：
- statusBarHeight = 状态栏高度
- capsule.top = 胶囊按钮距屏幕顶部距离
- capsule.height = 胶囊按钮高度

则：
- 上边距 = capsule.top - statusBarHeight
- 下边距 = 上边距 (对称设计)
- navBarHeight = 上边距 + capsule.height + 下边距
              = (capsule.top - statusBarHeight) * 2 + capsule.height
```

### 架构优势分析

1. **维护性**: 三层分离，职责清晰
2. **扩展性**: 易于添加新的适配功能
3. **性能**: 一次计算，全局复用
4. **稳定性**: 兜底机制保证不会崩溃

## 故障排除

### 常见问题

1. **导航栏高度不正确**
   - 检查是否添加了 systemAdaptBehavior
   - 确认 app.js 中系统信息初始化是否成功

2. **内容被遮挡**
   - 确认使用了 nav-bar 组件的 placeholder
   - 检查是否手动设置了错误的 margin-top

3. **在某些机型上异常**
   - 查看控制台是否有系统信息初始化错误
   - 检查兜底数据是否生效

### 调试方法

```javascript
// 在页面中添加调试信息
onLoad() {
  const systemInfo = this.data._systemInfo;
  if (!systemInfo) {
    console.error('系统适配信息未正确注入');
    return;
  }
  
  console.log('当前设备适配信息:', systemInfo);
}
```

通过这套三层适配架构，项目实现了完全自动化的系统适配，开发者只需要关注业务逻辑，无需处理复杂的设备兼容性问题。
