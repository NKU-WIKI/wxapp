---
alwaysApply: true
---

## 🏷️ 命名规范

- **目录和非组件文件**: 使用 `kebab-case` (小写短横线连接)。例如: `user-list`, `request.ts`。
- **页面/组件**:
  - 文件夹: `kebab-case`。例如: `src/pages/user-list`。
  - React 组件文件: `PascalCase`。例如: `UserList.tsx`。如果目录内只有一个组件，可命名为 `index.tsx`。
- **变量**: `camelCase` (小驼峰)。例如: `const userName = 'Taro';`。
- **常量**: `UPPER_SNAKE_CASE` (大写下划线连接)。例如: `const MAX_COUNT = 10;`。
- **函数/方法**: `camelCase`。例如: `function getUserInfo() {}`。
- **CSS 类名**: `kebab-case` 或 BEM 规范。推荐使用 CSS Modules，在 `*.module.scss` 文件中编写。
- **推荐库**:
  - `classnames`: 便捷地、有条件地组合 CSS 类名。
  - `lodash`: 提供大量实用的工具函数，按需引入。

## ✍️ 代码风格与规范

### Linter 与 Formatter

项目已配置 ESLint, Stylelint 和 Prettier，以强制执行统一的代码风格和质量标准。

- **ESLint**: 使用 `eslint.config.js` 进行配置，集成了 TypeScript 和 React 的最佳实践规则。
- **Stylelint**: 使用 `stylelint.config.mjs` 进行配置，集成了 SCSS 标准和属性排序规则。
- **Prettier**: 使用 `.prettierrc.mjs` 进行配置，负责代码的自动格式化。

所有代码在提交前都应通过 `husky` 和 `lint-staged` 的自动校验。

### TypeScript

- 始终开启 `strict` 模式。
- 明确定义函数参数和返回值的类型。
- 优先使用 `interface` 定义对象类型，使用 `type` 定义联合类型、交叉类型等。

### React

- **函数式组件优先**: 全面使用函数式组件和 Hooks (`useState`, `useEffect`, `useContext` 等)。
- **Hooks**:
  - 使用 `useMemo` 和 `useCallback` 进行性能优化，避免不必要的重渲染。
  - 自定义 Hooks 应用于封装可复用的逻辑，应以 `use` 开头。推荐将项目通用的 Hooks 抽离至 `src/hooks` 中。
- **组件封装**:
  - 组件应保持功能单一。
  - 超过 100 行的组件建议拆分。
  - 避免使用匿名函数作为组件属性，如 `<View onClick={() => {}} />`。

### 样式 (SCSS) 与颜色管理

- **CSS Modules**: 强制使用 `*.module.scss` 避免全局样式污染。
- **全局样式**: 全局变量、主题等写入 `src/app.scss`。
- **单位**: 推荐使用 `px`，Taro 会自动转换为 `rpx`。

#### 🎨 颜色管理规范 (强制)

**严禁使用硬编码颜色值**，必须使用项目统一的颜色常量系统。

##### SCSS 中使用颜色变量

所有颜色值都应从 `src/styles/variables.scss` 中引入。

##### TypeScript 中使用颜色常量

所有颜色值都应从 `src/constants/colors.ts` 中导入。

## 组件化开发

- **UI组件库**: 优先使用微信小程序原生组件库（如 WeUI），其次是 `Taro UI`。
- **自定义组件**: 对于 `Taro UI` 未提供的组件，或无法满足业务需求的场景，可在 `src/components` 目录下创建自定义组件。
- **原子组件**: 在 `src/components` 目录下，创建可复用的原子组件，如 `Button`, `Tag`, `Avatar`, `Card` 等。
- **业务组件**: 针对特定业务场景，封装业务组件，如 `PostItem` (帖子列表项), `CommentList` (评论列表) 等。

## UI/UX 规范

- **设计风格**: 简洁、卡片式布局，多采用圆角、留白和阴影。
- **图标**: 采用线性图标 (Line Icon)，风格统一。推荐从 [Iconify Solar](https://api.iconify.design/solar/) 下载 `SVG` 格式图标，并存储在 `src/assets/` 目录下。

### 🚨 SVG 图标尺寸问题排查指南

在开发中，可能会遇到 SVG 图标的尺寸无法通过 SCSS 的 `width` 和 `height` 属性进行有效控制的问题。当图标显示过大时，请遵循以下步骤进行排查：

1.  **第一步：检查 SVG 文件源码**
    - 打开表现异常的 `.svg` 文件。
    - 检查其根 `<svg>` 标签是否包含 `width="..."` 和 `height="..."` 属性。
    - **解决方案**：如果存在这些属性，请**务必将其移除**。这些内联属性的优先级高于外部样式表。

2.  **第二步：使用内联样式强制覆盖**
    - 如果移除 SVG 内部属性后问题依旧存在，可以使用 Taro `<Image>` 组件的**内联样式（inline style）**来强制定义尺寸。
