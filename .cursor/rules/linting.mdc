## Linting & Formatting 规范

为确保代码风格统一、规避潜在错误并提升代码质量，项目集成了 ESLint、Prettier 和 Stylelint。所有代码在提交前都必须通过这些工具的校验。

### 核心原则

- **Prettier**: 负责统一代码**格式**。它通过解析代码并使用自定义规则重新打印，确保所有代码的风格（缩进、分号、引号等）保持一致。
- **ESLint**: 负责 JavaScript 和 TypeScript 的**代码质量**。它通过静态分析发现潜在的 bug、不合理的写法，并执行编码规范。
- **Stylelint**: 负责 SCSS/CSS 的**代码质量和格式**。

三者协同工作，其中 Prettier 的格式化优先级最高。ESLint 和 Stylelint 中任何与 Prettier 冲突的**格式化**规则都已被禁用（通过 `eslint-config-prettier` 和 `stylelint-config-prettier`）。

### 脚本命令

- `npm run format`: 使用 Prettier **格式化**所有支持的文件。
- `npm run lint`: **检查** JS/TS 代码质量问题。
- `npm run lint:fix`: **自动修复**可修复的 JS/TS 问题。
- `npm run stylelint`: **检查**样式代码质量问题。
- `npm run stylelint:fix`: **自动修复**可修复的样式问题。
- `npm run lint:all`: **检查**所有代码质量问题。
- `npm run lint:all:fix`: **自动修复**所有代码质量问题。

### ESLint 深度配置 (`.eslintrc.js`)

- **继承链**: `taro/react` -> `plugin:@typescript-eslint/recommended` -> `prettier`。顺序至关重要，`prettier` 必须在最后以覆盖其他配置中的样式规则。
- **TypeScript 支持**: 明确使用 `@typescript-eslint/parser` 并继承推荐规则，对 TypeScript 代码进行最严格的类型检查。
- **React Hooks (强制)**: `react-hooks/rules-of-hooks` 和 `react-hooks/exhaustive-deps` 均设为 `error`，从根本上杜绝因 Hooks 使用不当导致的潜在 bug。
- **未使用变量 (严格)**: `_` (下划线) 前缀是允许未使用变量存在的**唯一**豁免方式。
- **导入顺序 (精细化)**: 使用 `eslint-plugin-import` 强制执行严格的导入顺序，规则如下：
  1.  `react`
  2.  `@tarojs/**`
  3.  第三方库 (`node_modules`)
  4.  内部绝对路径别名 (`@/components`, `@/services`, etc.)
  5.  父子级相对路径 (`../`, `./`)
  6.  `type` 类型导入
- **控制台输出**: 禁止使用 `console.log`，但允许 `console.warn` 和 `console.error`，以便在生产环境中追踪警告和错误。

### Stylelint 深度配置 (`stylelint.config.mjs`)

- **继承链**: `stylelint-config-standard-scss` -> `stylelint-config-prettier`。
- **Taro/SCSS 兼容**:
  - **`rpx` 单位**: 通过 `unit-no-unknown` 规则将 `rpx` 添加到白名单，解决了 Stylelint 无法识别小程序单位的问题。
  - **`:global` 伪类**: 允许在 CSS Modules 中使用 `:global` 伪类。
  - **`composes` 属性**: 允许在 CSS Modules 中使用 `composes` 属性进行样式组合。
- **SCSS 最佳实践**:
  - **变量命名**: 强制 SCSS 变量使用 `kebab-case` (短横线连接)。
  - **禁止冗余嵌套**: 禁止不必要的 `&` 嵌套选择器。
- **规则禁用**: 暂时禁用 `declaration-property-value-no-unknown` 规则。虽然此规则能检测属性值的拼写错误，但目前它对 SCSS 的变量和函数（如 `darken()`）支持不佳，会产生大量误报，因此暂时禁用以确保开发流程顺畅。

### Prettier 配置 (`.prettierrc.js`)

- 格式化配置相对稳定，遵循社区普遍的最佳实践，如使用单引号、无分号、100 字符行宽等。