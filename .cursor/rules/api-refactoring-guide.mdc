---
description: 
globs: 
alwaysApply: true
---
# API 重构指南

## 概述

本文档总结了 nkuwiki 项目中 API 重构的完整经验，从后端 API 文档化到前端接口调用的全面更新过程，为后续的 API 演进提供指导。

## 重构背景

### 问题现状
1. **API 文档缺失**: 前端代码中存在大量无文档支撑的 API 调用
2. **接口不一致**: 前后端字段名不统一，存在各种转换逻辑
3. **功能重复**: 多个接口实现相似功能，缺乏统一设计
4. **维护困难**: 接口变更时难以追踪影响范围

### 重构目标
1. **文档驱动**: 所有 API 都有完整的文档定义
2. **字段统一**: 前后端字段名严格一致
3. **接口简化**: 合并重复功能，提供更清晰的接口设计
4. **向前兼容**: 最大程度保证现有功能的正常运行

## 重构方法论

### 1. 文档优先原则

#### API 文档结构
```
api/
├── agent/
│   └── rag.md              # 智能问答接口
├── knowledge/
│   ├── search.md           # 知识库搜索
│   └── insight.md          # 智能洞察
└── wxapp/
    ├── user.md             # 用户管理
    ├── post.md             # 帖子管理
    ├── comment.md          # 评论系统
    ├── notification.md     # 通知系统
    └── action.md           # 通用操作
```

#### 文档编写规范
```markdown
# 接口名称

## 基本信息
- **路径**: `/api/module/action`
- **方法**: GET/POST/PUT/DELETE
- **认证**: 是否需要认证

## 请求参数
| 参数名 | 类型 | 必填 | 说明 |
|--------|------|------|------|
| param1 | string | 是 | 参数说明 |

## 响应格式
```json
{
  "code": 200,
  "message": "success",
  "data": {
    "field1": "value1"
  }
}
```

## 使用示例
```javascript
const result = await apiClient.method({ param1: 'value1' });
```
```

### 2. 渐进式重构策略

#### 阶段一：接口梳理和文档化
1. **盘点现有接口**: 收集所有前端调用的 API
2. **分析使用场景**: 了解每个接口的实际用途
3. **编写 API 文档**: 为所有接口创建标准文档
4. **识别重复功能**: 发现可以合并的接口

#### 阶段二：后端接口优化
1. **字段名统一**: 确保响应字段与数据库字段一致
2. **接口合并**: 将相似功能的接口合并为通用接口
3. **参数标准化**: 统一参数命名和格式
4. **响应格式规范**: 统一响应结构和错误码

#### 阶段三：前端代码重构
1. **Behavior 更新**: 逐个更新各个功能模块的 behavior
2. **接口调用调整**: 修改 API 调用以适应新接口
3. **字段映射清理**: 移除不必要的字段转换逻辑
4. **错误处理优化**: 统一错误处理逻辑

## 具体重构经验

### 1. 用户模块重构 (`userBehavior.js`)

#### 重构前问题
```javascript
// 旧代码存在的问题
const userApi = createApiClient('/api/wxapp/user', {
  follow: { method: 'POST', path: '/follow' },    // 功能重复
  status: { method: 'GET', path: '/status' }      // 无明确用途
});
```

#### 重构后方案
```javascript
// 新的统一设计
const actionApi = createApiClient('/api/wxapp/action', {
  toggle: { method: 'POST', path: '/toggle', params: { openid: true } }
});

// 通过参数区分不同操作类型
async _toggleFollow(targetId, action = 'follow') {
  return await actionApi.toggle({
    target_type: 'user',
    target_id: targetId,
    action_type: action
  });
}
```

#### 重构收益
- **接口数量减少**: 从多个专门接口合并为一个通用接口
- **逻辑统一**: 所有切换类操作使用相同的处理逻辑
- **易于扩展**: 新增操作类型只需添加参数，无需新接口

### 2. 帖子模块重构 (`postBehavior.js`)

#### 核心变化
1. **点赞收藏统一**: 使用 `action/toggle` 接口
2. **列表查询优化**: 统一过滤参数格式
3. **字段名规范**: 严格按照数据库字段命名

#### 重构对比
```javascript
// 重构前：多个专门接口
await postApi.like({ post_id: id });
await postApi.favorite({ post_id: id });
await postApi.getList({ category: 'study', sortBy: 'time' });

// 重构后：统一接口设计
await actionApi.toggle({ 
  target_type: 'post', 
  target_id: id, 
  action_type: 'like' 
});
await this._getPostList({ 
  category_id: 1,           // 使用数据库字段名
  order_by: 'create_time'   // 使用数据库字段名
});
```

### 3. 评论模块重构 (`commentBehavior.js`)

#### 接口细化设计
```javascript
// 旧设计：一个宽泛的获取接口
_getCommentList(params) {
  // 通过参数判断获取帖子评论还是用户评论
}

// 新设计：明确的专门接口
const commentApi = createApiClient('/api/wxapp/comment', {
  listByPost: { method: 'GET', path: '/post', params: { post_id: true } },
  listByUser: { method: 'GET', path: '/user', params: { openid: true } },
  getReplies: { method: 'GET', path: '/replies', params: { comment_id: true } }
});
```

#### 设计优势
- **职责明确**: 每个接口有明确的使用场景
- **参数精简**: 避免复杂的参数判断逻辑
- **性能优化**: 后端可以针对性优化查询逻辑

### 4. 通知模块重构 (`notificationBehavior.js`)

#### 接口语义化
```javascript
// 重构前：接口命名不清晰
const notificationApi = createApiClient('/api/wxapp/notification', {
  check: { method: 'GET', path: '/check' },        // 语义不明
  readAll: { method: 'POST', path: '/readAll' }    // 功能受限
});

// 重构后：语义明确的接口设计
const notificationApi = createApiClient('/api/wxapp/notification', {
  count: { method: 'GET', path: '/count', params: { openid: true } },
  markRead: { method: 'POST', path: '/read', params: { openid: true } }
});
```

#### 功能增强
- **批量操作**: 支持批量标记已读
- **未读计数**: 专门的未读数查询接口
- **灵活标记**: 可以标记单个或多个通知

### 5. 知识库模块重构 (`knowledgeBehavior.js`)

#### 大幅简化
```javascript
// 重构前：过多未使用的 CRUD 方法
const knowledgeApi = createApiClient('/api/knowledge', {
  list: { method: 'GET', path: '/list' },
  detail: { method: 'GET', path: '/detail' },
  create: { method: 'POST', path: '/create' },    // 未在API文档中定义
  update: { method: 'PUT', path: '/update' },     // 未在API文档中定义
  delete: { method: 'DELETE', path: '/delete' }   // 未在API文档中定义
});

// 重构后：只保留有文档支撑的接口
const knowledgeApi = createApiClient('/api/knowledge', {
  search: { method: 'GET', path: '/search' },
  suggest: { method: 'GET', path: '/suggest' },
  history: { method: 'GET', path: '/history' },
  insight: { method: 'GET', path: '/insight' }
});
```

#### 清理原则
- **文档驱动**: 只保留 API 文档中明确定义的接口
- **需求导向**: 只实现前端实际需要的功能
- **避免过度设计**: 不提前实现可能的未来需求

### 6. 智能体模块重构 (`agentBehavior.js`)

#### 接口聚焦
```javascript
// 重构前：多个试验性接口
const agentApi = createApiClient('/api/agent', {
  chat: { method: 'POST', path: '/chat' },         // 已废弃
  status: { method: 'GET', path: '/status' },      // 已废弃
  rag: { method: 'POST', path: '/rag' }
});

// 重构后：聚焦核心功能
const agentApi = createApiClient('/api/agent', {
  rag: { method: 'POST', path: '/rag', params: { openid: true } }
});
```

#### 架构简化
- **单一入口**: 所有智能问答通过 RAG 接口
- **移除废弃**: 清理不再使用的试验性接口
- **专注核心**: 集中资源完善主要功能

## 重构最佳实践

### 1. 重构前准备

#### 影响分析
```javascript
// 创建接口使用情况分析工具
function analyzeApiUsage() {
  // 1. 扫描所有 behavior 文件
  // 2. 统计 API 调用频率
  // 3. 识别关键路径
  // 4. 评估重构风险
}
```

#### 测试覆盖
- **功能测试**: 确保核心功能正常
- **回归测试**: 验证重构后无功能丢失
- **性能测试**: 对比重构前后的性能指标

### 2. 重构实施

#### 分模块重构
```javascript
// 重构检查清单
const refactoringChecklist = {
  // API 文档检查
  hasApiDoc: true,
  fieldNamesConsistent: true,
  
  // 代码质量检查
  removedDeadCode: true,
  errorHandlingUpdated: true,
  
  // 功能验证
  coreFeaturesTested: true,
  noRegressionFound: true
};
```

#### 版本控制策略
- **功能分支**: 每个模块的重构使用独立分支
- **原子提交**: 每次提交只包含一个模块的完整重构
- **详细日志**: 记录重构的具体变更和原因

### 3. 重构验证

#### 自动化测试
```javascript
// API 接口一致性测试
describe('API 重构验证', () => {
  test('用户接口功能正常', async () => {
    const userInfo = await userBehavior._getUserProfile(testOpenid);
    expect(userInfo).toHaveProperty('nickname');
    expect(userInfo).toHaveProperty('avatar');
  });
  
  test('帖子操作正常', async () => {
    const posts = await postBehavior._getPostList({});
    expect(posts.data).toBeInstanceOf(Array);
    expect(posts.pagination).toHaveProperty('has_more');
  });
});
```

#### 人工验证
- **核心流程**: 手动测试关键用户路径
- **边界情况**: 验证异常情况的处理
- **性能体验**: 确保用户体验无明显下降

## 重构成果

### 1. 代码质量提升

#### 指标对比
```
重构前:
- API 接口数量: 45+
- 未文档化接口: 18
- 字段转换逻辑: 12处
- behavior 文件平均行数: 280

重构后:
- API 接口数量: 28
- 未文档化接口: 0
- 字段转换逻辑: 0
- behavior 文件平均行数: 200
```

#### 质量改进
- **代码简化**: 平均减少30%的代码量
- **逻辑清晰**: 移除复杂的条件判断和转换逻辑
- **易于维护**: 统一的错误处理和调用模式

### 2. 开发效率提升

#### 开发体验改进
- **API 调用标准化**: 所有接口使用统一的调用方式
- **错误信息明确**: 统一的错误码和错误信息
- **文档完整**: 每个接口都有详细的使用说明

#### 维护成本降低
- **影响范围明确**: 接口变更的影响范围容易追踪
- **测试简化**: 标准化的接口更容易编写测试
- **新人上手**: 完整的文档降低学习成本

### 3. 系统架构优化

#### 架构简化
- **统一接口设计**: 通过通用接口减少重复开发
- **职责分离**: 每个模块有明确的功能边界
- **扩展性增强**: 新功能更容易集成到现有架构

#### 性能优化
- **请求减少**: 合并相似接口减少网络请求
- **缓存优化**: 统一的缓存策略提升响应速度
- **错误处理**: 更精确的错误处理减少无效重试

## 未来演进指导

### 1. API 设计原则

#### 接口设计规范
```javascript
// 好的 API 设计示例
const goodApiDesign = {
  // 1. 语义明确
  path: '/api/wxapp/post/list',
  
  // 2. 参数规范
  params: {
    category_id: 1,        // 使用数据库字段名
    order_by: 'create_time',
    page: 1,
    page_size: 10
  },
  
  // 3. 响应一致
  response: {
    code: 200,
    message: 'success',
    data: [],
    pagination: {}
  }
};
```

#### 版本控制策略
- **向后兼容**: 新版本 API 应保持向后兼容
- **渐进升级**: 通过版本号支持渐进式升级
- **废弃警告**: 废弃的接口应提供明确的替代方案

### 2. 重构流程标准化

#### 重构工作流
```
1. 需求分析 → 确定重构范围和目标
2. 文档编写 → 设计新的 API 接口文档
3. 后端实现 → 开发新接口，保持旧接口兼容
4. 前端重构 → 逐步迁移到新接口
5. 测试验证 → 全面测试新旧接口功能
6. 灰度发布 → 逐步切换到新接口
7. 清理废弃 → 移除旧接口和冗余代码
```

#### 质量保证
- **代码审查**: 所有重构代码必须经过审查
- **自动化测试**: 建立完整的自动化测试体系
- **监控告警**: 重构后的性能和错误监控

## 总结

这次 API 重构的成功经验证明了文档驱动、渐进式重构的有效性。通过明确的重构目标、系统的实施方法和严格的质量保证，我们不仅优化了系统架构，还显著提升了开发效率和代码质量。

这些经验将为后续的系统演进提供重要指导，确保项目能够持续健康发展。
