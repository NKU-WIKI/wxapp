---
description: 
globs: 
alwaysApply: true
---
# nkuwiki 微信小程序组件使用指南

本文档介绍了 nkuwiki 项目中30+个可复用组件的使用方法和最佳实践。

## 核心组件分类

### 1. 导航和布局组件
- **nav-bar**: 自定义导航栏 (支持固定定位和系统适配)
- **tab-bar**: 标签栏
- **floating-button**: 悬浮按钮

### 2. 表单和输入组件  
- **search-bar**: 智能搜索框 (支持前缀选择)
- **text-area**: 富文本编辑器 (支持Markdown)
- **input-field**: 输入框
- **picker-field**: 选择器
- **image-uploader**: 图片上传

### 3. 数据展示组件
- **post-list**: 帖子列表 (自动加载/自定义模式)
- **post-item**: 帖子项 (详情页/列表页双模式)
- **user-list**: 用户列表
- **user-card**: 用户卡片
- **comment-list**: 评论列表
- **comment-item**: 评论项
- **source-list**: 来源列表

### 4. 反馈和状态组件
- **loading**: 统一加载组件 (多种样式)
- **cell-status**: 单元格状态
- **icon**: 图标系统 (60+图标)

### 5. 业务组件
- **card**: 卡片容器
- **menu-list**: 菜单列表
- **category-tab**: 分类标签
- **function-grid-menu**: 功能网格菜单
- **search-history**: 搜索历史
- **setting-item**: 设置项
- **login-card**: 登录卡片
- **logo-section**: Logo展示区

## 高复用核心组件详解

### nav-bar 自定义导航栏 (100%复用)

项目中**所有页面都必须使用nav-bar**，它已集成了完整的系统适配功能。

**基础用法**:
```xml
<nav-bar 
  title="页面标题"
  fixed="{{true}}"
  showBack="{{true}}"
  showHome="{{false}}"
  showAvatar="{{false}}"
  showNotification="{{true}}"
/>
```

**完整属性说明**:
- `title`: 导航栏标题
- `fixed`: 是否固定定位，**推荐始终设为true**
- `showBack`: 是否显示返回按钮
- `showHome`: 是否显示首页按钮  
- `showAvatar`: 是否显示头像按钮
- `showNotification`: 是否显示通知按钮
- `textColor`: 文字颜色，默认 `#000000`
- `bgColor`: 背景颜色，默认 `#ffffff`

**页面布局规范**:
```xml
<view class="page-container">
  <nav-bar 
    title="页面标题"
    fixed="{{true}}"
    showBack="{{true}}"
  />
  
  <!-- 页面内容自动避开导航栏 -->
  <view class="page-content">
    <!-- 内容区域 -->
  </view>
</view>
```

**使用场景**: 所有页面必备，nav-bar会自动处理状态栏适配和占位

### search-bar 智能搜索框 (50%复用)

支持多种搜索类型前缀选择的智能搜索组件。

**基础用法**:
```xml
<search-bar
  value="{{searchValue}}"
  placeholder="搜索校园知识"
  focus="{{false}}"
  showAction="{{true}}"
  actionText="搜索"
  bindinput="onSearchInput"
  bindclear="clearSearch"
  bindconfirm="search"
  bindaction="search"
/>
```

**支持搜索前缀选择**:
```xml
<search-bar
  value="{{searchValue}}"
  placeholder="@wiki探索校园知识"
  options="{{searchOptions}}"
  bindselect="onSearchSelect"
/>
```

**searchOptions配置示例**:
```javascript
data: {
  searchOptions: [
    { text: '南开小知', value: '@wiki', type: 'wiki', icon: 'robot' },
    { text: '帖子', value: '@post', type: 'post', icon: 'book' },
    { text: '用户', value: '@user', type: 'user', icon: 'profile' },
    { text: '知识库', value: '@knowledge', type: 'knowledge', icon: 'life' }
  ]
}
```

**属性说明**:
- `value`: 搜索框的值
- `placeholder`: 占位符文本
- `focus`: 是否获得焦点
- `showAction`: 是否显示操作按钮
- `actionText`: 操作按钮文本
- `options`: 搜索选项配置数组

### post-item 帖子项 (80%复用)

支持列表页和详情页双模式的帖子展示组件。

**列表页模式**:
```xml
<post-item 
  post="{{item}}" 
  showAction="{{true}}"
  showComment="{{true}}"
  bind:postDeleted="onPostDeleted"
/>
```

**详情页模式**:
```xml
<post-item 
  post="{{postDetail.data}}" 
  detailPage="{{true}}"
  showAction="{{true}}"
  role="{{role}}"
/>
```

**属性说明**:
- `post`: 帖子数据对象 (必需)
- `showAction`: 是否显示操作按钮 (点赞、收藏、分享)
- `showComment`: 是否显示评论数量
- `showFollow`: 是否显示关注按钮
- `detailPage`: 是否为详情页模式
- `role`: 用户角色

**重要事件**:
- `postDeleted`: 帖子删除事件，用于更新列表

### post-list 帖子列表 (80%复用)

支持自动加载和自定义数据两种模式的帖子列表组件。

**自动加载模式**:
```xml
<post-list 
  id="postList"
  filter="{{filter}}"
/>
```

**自定义数据模式**:
```xml
<post-list 
  post="{{searchResults}}"
  autoLoad="{{false}}"
  loading="{{loading}}"
  hasMore="{{pagination.has_more}}"
  bind:loadmore="loadMore"
  emptyText="没有找到相关帖子"
/>
```

**属性说明**:
- `filter`: 过滤条件 (用于自动加载模式)
- `post`: 帖子数据数组 (用于自定义模式)
- `autoLoad`: 是否自动加载，默认true
- `loading`: 加载状态
- `hasMore`: 是否有更多数据
- `emptyText`: 空状态文本

### icon 图标组件 (95%复用)

统一的图标管理系统，包含60+个图标。

**基础用法**:
```xml
<icon name="like" size="32" color="#999" />
<icon name="comment" size="32" color="#999" />
<icon name="share" size="32" color="#999" />
```

**完整图标列表**:

#### 操作图标
- `like`, `like-active` - 点赞
- `comment` - 评论
- `favorite`, `favorited` - 收藏
- `share` - 分享
- `close`, `delete`, `add` - 基础操作
- `loading`, `copy`, `clear`, `refresh` - 功能操作
- `image`, `eye`, `book` - 内容操作

#### 导航图标
- `home`, `home-active` - 首页
- `discover`, `discover-active` - 发现
- `profile`, `profile-active` - 个人
- `search`, `search-active` - 搜索
- `notification`, `notification-unread` - 通知
- `setting`, `back`, `arrow-right` - 导航

#### 分类图标
- `study` - 学习交流
- `life` - 校园生活  
- `job` - 就业创业
- `club` - 社团活动
- `market` - 二手市场
- `lost` - 失物招领

#### 状态图标
- `success`, `error`, `empty` - 状态反馈
- `robot`, `wiki` - 特殊功能

#### 用户相关
- `profile`, `avatar1`, `avatar2` - 用户头像
- `footprint`, `coins`, `token` - 用户数据
- `message`, `star`, `logout` - 用户操作

**注意事项**:
- 图标大小建议使用32rpx、48rpx、64rpx等规范尺寸
- 不要使用不存在的图标名称，如`question`应使用`about`
- 颜色可以通过color属性自定义

### loading 加载组件 (85%复用)

统一的加载状态展示组件，支持多种样式。

**基础用法**:
```xml
<loading 
  show="{{isLoading}}"
  text="加载中..."
  type="inline"
/>
```

**不同类型的loading**:
```xml
<!-- 内联加载 -->
<loading type="inline" text="搜索中..." />

<!-- 点状加载 -->
<loading type="dots" size="small" text="思考中..." />

<!-- 全屏加载 -->
<loading type="fullscreen" mask="{{true}}" text="处理中..." />
```

**属性说明**:
- `show`: 是否显示loading
- `text`: 加载提示文本
- `type`: 加载类型 (`inline`, `dots`, `fullscreen`)
- `size`: 大小 (`small`, `normal`, `large`)
- `mask`: 是否显示遮罩层

### text-area 富文本编辑器 (30%复用)

支持富文本和Markdown双模式的文本编辑器。

**编辑模式**:
```xml
<text-area 
  value="{{content}}" 
  readOnly="{{false}}" 
  markdownMode="{{true}}"
  showToolbar="{{true}}"
  bindinput="onContentInput"
/>
```

**只读展示模式**:
```xml
<text-area 
  value="{{ragResults}}" 
  readOnly="{{true}}" 
  markdownMode="{{true}}"
  height="{{600}}"
  showToolbar="{{false}}"
/>
```

**属性说明**:
- `value`: 文本内容
- `readOnly`: 是否只读
- `markdownMode`: 是否启用Markdown模式
- `showToolbar`: 是否显示工具栏
- `height`: 高度设置

### user-card 用户卡片 (40%复用)

用于个人中心和用户详情页的用户信息展示卡片。

**基础用法**:
```xml
<user-card
  userInfo="{{userInfo}}"
  stats="{{stats}}"
  isCurrentUser="{{true}}"
  loading="{{loading}}"
  bind:refresh="onRefresh"
/>
```

**属性说明**:
- `userInfo`: 用户信息对象
- `stats`: 用户统计数据 (帖子数、关注数等)
- `isCurrentUser`: 是否为当前用户
- `loading`: 加载状态

## 页面组件组合模式

### 首页模式
```json
{
  "usingComponents": {
    "nav-bar": "/components/nav-bar/nav-bar",
    "search-bar": "/components/search-bar/search-bar", 
    "post-list": "/components/post-list/post-list",
    "category-tab": "/components/category-tab/category-tab",
    "floating-button": "/components/floating-button/floating-button",
    "icon": "/components/icon/icon"
  }
}
```

### 搜索页模式
```json
{
  "usingComponents": {
    "nav-bar": "/components/nav-bar/nav-bar",
    "search-bar": "/components/search-bar/search-bar",
    "post-list": "/components/post-list/post-list",
    "user-list": "/components/user-list/user-list",
    "source-list": "/components/source-list/source-list",
    "text-area": "/components/text-area/text-area",
    "loading": "/components/loading/loading",
    "icon": "/components/icon/icon",
    "search-history": "/components/search-history/search-history"
  }
}
```

### 详情页模式
```json
{
  "usingComponents": {
    "nav-bar": "/components/nav-bar/nav-bar",
    "post-item": "/components/post-item/post-item",
    "comment-list": "/components/comment-list/comment-list",
    "icon": "/components/icon/icon",
    "loading": "/components/loading/loading"
  }
}
```

### 个人中心模式
```json
{
  "usingComponents": {
    "nav-bar": "/components/nav-bar/nav-bar",
    "user-card": "/components/user-card/user-card",
    "menu-list": "/components/menu-list/menu-list",
    "icon": "/components/icon/icon"
  }
}
```

### 发现页模式
```json
{
  "usingComponents": {
    "nav-bar": "/components/nav-bar/nav-bar",
    "loading": "/components/loading/loading",
    "icon": "/components/icon/icon",
    "card": "/components/card/card"
  }
}
```

## 组件使用最佳实践

### 1. 组件引用原则
- **必须声明**: 使用组件前必须在页面json文件中引入
- **核心组件**: nav-bar、icon几乎每个页面都需要
- **按需引入**: 根据页面功能选择合适的数据展示组件
- **路径统一**: 使用绝对路径，保持一致性

**正确的组件引入示例**:
```json
{
  "navigationBarTitleText": "页面标题",
  "usingComponents": {
    "nav-bar": "/components/nav-bar/nav-bar",
    "loading": "/components/loading/loading",
    "icon": "/components/icon/icon"
  }
}
```

### 2. 避免重复造轮子
- **loading组件**: 统一使用项目的loading组件，不要自定义loading样式
- **icon组件**: 使用现有的60+图标，不要创建新图标文件
- **优先复用**: 项目已有30+组件，优先复用避免重复开发

### 3. 数据绑定规范
```xml
<!-- 正确的数据绑定 -->
<post-item 
  post="{{item}}" 
  bind:postDeleted="onPostDeleted"
  data-index="{{index}}"
/>
```

```javascript
// 事件处理
onPostDeleted(e) {
  const { index } = e.currentTarget.dataset;
  // 处理删除逻辑，更新列表数据
  const postList = [...this.data.postList];
  postList.splice(index, 1);
  this.setData({ postList });
}
```

### 4. 样式定制
```xml
<!-- 使用自定义样式类 -->
<user-card 
  userInfo="{{userInfo}}"
  custom-class="my-user-card"
/>
```

```css
/* 页面样式中定制 */
.my-user-card {
  margin: 20rpx 0;
  border-radius: 16rpx;
}
```

### 5. 组件通信
```javascript
// 父向子传递数据
this.setData({ 
  postData: newData 
});

// 子向父发送事件
this.triggerEvent('customEvent', { 
  data: eventData 
});

// 父组件监听
onCustomEvent(e) {
  const { data } = e.detail;
  // 处理事件
}
```

## 系统适配要求

### 1. nav-bar组件适配
**所有页面都必须使用systemAdaptBehavior + nav-bar组合**：

```javascript
Page({
  behaviors: [
    behaviors.baseBehavior,
    behaviors.systemAdaptBehavior  // 必需！
  ]
});
```

```xml
<nav-bar 
  title="页面标题"
  fixed="{{true}}"  <!-- 推荐固定定位 -->
  showBack="{{true}}"
/>
```

### 2. 禁止的做法
- ❌ 不要手动计算导航栏高度
- ❌ 不要在WXML中手动设置margin-top
- ❌ 不要自定义导航栏组件

## 性能优化建议

### 1. 条件渲染
```xml
<!-- 使用条件渲染优化性能 -->
<post-list wx:if="{{shouldShowList}}" />
<loading wx:if="{{isLoading}}" />
<view wx:else>暂无数据</view>
```

### 2. 数据优化
```javascript
// 使用纯数据模式
options: {
  pureDataPattern: /^_/
},

data: {
  _cacheData: {},     // 不触发渲染
  renderData: {}      // 参与渲染
}
```

### 3. 组件复用
- **同类型页面复用相同的组件配置**
- **通过属性控制组件行为，避免重复开发**
- **合理使用behaviors共享逻辑**

## 组件开发规范

如果需要开发新组件，请遵循以下规范：

### 1. 组件结构
```javascript
Component({
  behaviors: [behaviors.baseBehavior],
  
  options: {
    pureDataPattern: /^_/,
    multipleSlots: true,
    addGlobalClass: true,
    styleIsolation: 'apply-shared'
  },
  
  properties: {
    // 定义组件属性
  },
  
  data: {
    // 组件内部数据
  },
  
  methods: {
    // 组件方法
  }
});
```

### 2. 命名规范
- **组件名**: 使用小写+连字符，如`post-item`
- **属性名**: 使用驼峰命名，如`showAction`
- **事件名**: 使用小写+冒号，如`bind:postDeleted`

### 3. 文档完善
新组件开发完成后应该：
- 更新本文档添加使用说明
- 在相关页面测试组件功能
- 确保组件具有良好的复用性

## 错误排查

### 常见问题
1. **组件未显示**: 检查是否在json中正确引入
2. **样式不生效**: 检查styleIsolation设置
3. **事件不响应**: 检查事件绑定语法
4. **数据不更新**: 检查数据绑定和setData调用

### 调试技巧
- 使用微信开发者工具的组件调试功能
- 在组件的生命周期函数中添加日志
- 检查组件的properties和data状态

通过遵循这些组件使用规范，可以大大提高开发效率和代码质量，确保项目的一致性和可维护性。
