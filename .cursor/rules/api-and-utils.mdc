---
description: 
globs: 
alwaysApply: true
---
# API 调用与工具类开发规范

本文档旨在为 nkuwiki 小程序项目的 API 调用和工具类使用提供一套最佳实践，确保代码的一致性、可维护性和高质量。

## 1. API 客户端 (`utils/apiClient.js`)

项目中所有的后端接口调用都应通过 `apiClient` 来创建。它提供了一个统一的、声明式的方式来定义 API，并自动处理了基础路径、请求参数、用户认证等通用逻辑。

### 核心理念

- **声明式定义**：将 API 的定义（方法、路径、参数）与调用分离。
- **配置优于编码**：通过配置文件来管理 API，而不是在业务代码中硬编码 URL。
- **自动注入**：自动处理 `openid` 等通用参数，简化调用。

### 如何使用

1.  **定义 API 客户端**:
    在对应的 `behavior` 或 `js` 文件顶部，使用 `createApiClient` 创建一个实例。

    ```javascript
    // 例如：在 userBehavior.js 中
    const { createApiClient } = require('../utils/index');

    const userApi = createApiClient('/api/wxapp/user', {
      profile: { method: 'GET', path: '/profile', params: { openid: true } },
      update: { method: 'POST', path: '/update', params: { openid: true } },
      login: { method: 'POST', path: '/login' }
    });
    ```

2.  **调用 API 方法**:
    在需要的地方，直接调用你定义好的方法。

    ```javascript
    async function _getUserProfile(userId) {
      try {
        // apiClient 会自动从 storage 中获取 openid 并附加到请求中
        const res = await userApi.profile({ openid: userId });
        if (res.code === 200) {
          return res.data;
        }
        return null;
      } catch (err) {
        console.error('获取用户信息失败', err);
        return null;
      }
    }
    ```

## 2. 核心工具函数 (`utils/`)

`utils/` 目录提供了一系列高复用性的工具函数。在开发前，请先查阅 `utils/index.js`，优先使用已有的工具，避免重复造轮子。

### a. 全局存储 (`utils/storage.js`)

`storage` 工具是对微信 `wx.setStorageSync` 等原生 API 的封装，提供了更便捷、更安全的接口，并自动处理了 JSON 序列化和反序列化。

**严禁直接使用 `wx.getStorageSync` 或 `wx.setStorageSync`**，请务必使用此模块。

```javascript
const { storage } = require('/utils/index');

// 写入数据 (自动转换为JSON字符串)
storage.set('userInfo', { name: 'Nankai', level: 99 });

// 读取数据 (自动解析JSON)
const user = storage.get('userInfo'); 
// => { name: 'Nankai', level: 99 }

// 读取不存在的数据，返回默认值
const token = storage.get('token', '');

// 删除数据
storage.remove('userInfo');
```

### b. 时间与日期 (`utils/datetime.js`)

提供了多种时间格式化功能，特别是相对时间的展示。

```javascript
const { datetime } = require('/utils/index');

// 格式化为相对时间，如：5分钟前, 3天前
const postTime = datetime.formatRelativeTime('2023-10-27T10:00:00Z');

// 格式化为标准日期时间
const specificTime = datetime.format('YYYY-MM-DD HH:mm', new Date());
```

### c. 日志系统 (`utils/logger.js`)

项目集成了统一的日志系统，可以根据环境（开发/生产）和配置来控制日志的输出级别，并支持将日志上报到服务器。

- **`logger.debug()`**: 用于开发调试，生产环境默认不输出。
- **`logger.info()`**: 用于记录关键的业务流程信息。
- **`logger.warn()`**: 用于记录可预期的、非致命的异常情况。
- **`logger.error()`**: 用于记录严重的、导致功能失败的错误。

```javascript
const logger = require('/utils/logger');

function someFunction(data) {
  logger.debug('进入 someFunction', { data });

  if (!data.id) {
    logger.warn('数据ID缺失，但流程可继续', { context: data });
  }

  try {
    // ...
    logger.info('操作成功', { result: 'some_result' });
  } catch (err) {
    logger.error('关键操作失败', { error: err, data });
  }
}
```

### d. UI 反馈 (`utils/ui.js`)

封装了小程序常用的交互反馈，如 `Toast`、`Modal`，统一了调用方式和样式。

```javascript
const ui = require('/utils/ui');

// 显示成功提示
ui.showToast('操作成功', { icon: 'success' });

// 显示错误提示
ui.showToast('网络开小差了', { icon: 'error' });

// 显示确认对话框
const isConfirmed = await ui.showModal({
  title: '提示',
  content: '确定要删除这条记录吗？'
});

if (isConfirmed) {
  // ... 执行删除操作
}
```

## 3. 错误处理

项目中应使用 `try...catch` 来捕获异步操作中可能出现的错误，并结合 `logger` 进行记录。

```javascript
async function fetchData() {
  try {
    const data = await someApi.getData();
    // ...
  } catch (err) {
    // 记录错误详情
    logger.error('获取数据失败', { error: err });
    
    // 给用户一个友好的提示
    ui.showToast('数据加载失败，请稍后重试', { icon: 'error' });
    
    // 可以选择向上抛出错误或返回null
    return null;
  }
}
```

通过遵循以上规范，我们可以构建一个更加健壮、可维护和易于协作的小程序项目。
