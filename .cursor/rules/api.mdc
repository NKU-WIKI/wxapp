### 📡 API 对接工作流

为了保证与后端接口的高效、规范对接，所有涉及网络请求的代码都必须遵循以下工作流。这是一个**强制性规范**，旨在从根源上杜绝路径错误、参数不匹配和数据解析失败等问题。

1.  **第一步：阅读 API 文档 (强制)**
    -   在编写任何代码之前，**必须**首先在 `backend-api/` 目录下找到并仔细阅读对应的接口文档（例如 `backend-api/wxapp/post.md`）。
    -   重点关注：
        -   **Endpoint 路径**: 确认是 `GET` 还是 `POST`，以及完整的路径（例如 `/wxapp/post/list`）。
        -   **请求参数**: 确认参数是在 Query 中还是 Body 中，以及参数的命名规范（`snake_case` 还是 `camelCase`）。
        -   **响应结构**: 确认成功响应的数据结构，特别是列表数据（`data`）和分页信息（`pagination`）是否为平级字段。

2.  **第二步：定义类型 (Types)**
    -   在 `src/types/api/` 目录下为模块创建或更新类型定义文件（例如 `post.d.ts`）。
    -   定义请求参数 `interface` 和响应数据 `interface`。

3.  **第三步：创建或更新 API 服务 (Service)**
    -   在 `src/services/api/` 目录下创建或更新对应的服务文件（例如 `post.ts`）。
    -   所有请求**必须**使用 `src/services/request.ts` 中导出的 `http` 对象 (`http.get` 或 `http.post`)。
    -   在这一层，负责将前端的驼峰式参数 (`camelCase`) 转换为后端需要的蛇形参数 (`snake_case`)。

4.  **第四步：创建或更新 Redux Thunk (Slice)**
    -   在 `src/store/slices/` 中创建或更新对应的 `slice.ts` 文件。
    -   使用 `createAsyncThunk` 创建异步 action。
    -   **关键**：在 `asyncThunk` 的 `payloadCreator` 函数中，调用 API service 后，**必须**对返回的响应体进行转换，将其适配为前端 Redux store 需要的统一数据结构（例如，将 `{ data: [...], pagination: {...} }` 转换为统一的 `PaginatedData` 对象）。

5.  **第五步：组件中使用**
    -   在组件中通过 `useDispatch` 派发异步 action。
    -   通过 `useSelector` 从 store 中获取数据并渲染。

### 🔗 网络请求规范

- **统一封装**: 在 `src/services/request.ts` 中封装 `Taro.request`，统一处理请求头、错误、Loading 状态等。
- **API 管理**: 在 `src/services/api/` 目录下按模块统一管理所有接口。
- **环境配置**: 在 `config/dev.js` 和 `config/prod.js` 中管理项目的基础配置，如 `baseUrl` 等。
- **路径别名**: 在 `config/index.ts` 中配置 `@` 作为 `src` 目录的别名，简化模块导入路径。
