---
description: 
globs: 
alwaysApply: true
---
# nkuwiki 微信小程序项目概览

## 项目简介

nkuwiki 是一个基于微信小程序原生框架开发的南开大学校园知识共享平台，集成了帖子社区、智能问答、多源知识检索等功能，致力于构建南开校园知识生态。

## 技术架构

### 前端技术栈
- **框架**: 微信小程序原生框架
- **UI组件库**: WeUI-miniprogram + 自定义组件系统
- **状态管理**: Behaviors 模式 (10个核心behavior)
- **数据存储**: 微信小程序本地存储 + 工具类封装
- **网络请求**: 统一的 API 客户端 (支持声明式配置)
- **系统适配**: 三层适配架构 (全局信息+behavior+组件)

### 后端接口架构
- **API 设计**: RESTful API (28个接口)
- **数据源整合**: 
  - 官网数据 (website_nku)
  - 微信公众号 (wechat_nku) 
  - 二手市场 (market_nku)
  - 用户原创 (wxapp_post)
- **搜索引擎**: 基于相关度的全文检索
- **智能问答**: RAG (检索增强生成) 系统

## 项目结构

```
app/
├── pages/              # 12个页面模块
│   ├── index/          # 首页 - 帖子流 + 搜索
│   ├── discover/       # 发现页 - 每日洞察 (官方/社区/集市)
│   ├── search/         # 搜索页 - 多类型搜索 (@wiki/@post/@user/@knowledge)
│   ├── post/           # 帖子系统
│   │   ├── post.js     # 发布帖子 (支持富文本/Markdown)
│   │   └── detail/     # 帖子详情 + 评论
│   ├── profile/        # 个人中心 + 子页面
│   ├── user/           # 用户详情页
│   ├── notification/   # 通知系统
│   ├── knowledge/detail/ # 知识详情页
│   ├── login/          # 登录授权
│   ├── about/          # 关于页面
│   └── webview/        # 外部链接
├── components/         # 30+个组件
│   ├── nav-bar/        # 自定义导航栏 (支持固定定位)
│   ├── search-bar/     # 智能搜索框 (支持前缀选择)
│   ├── post-item/      # 帖子项 (详情页/列表页双模式)
│   ├── post-list/      # 帖子列表 (自动加载/自定义模式)
│   ├── user-card/      # 用户卡片
│   ├── comment-list/   # 评论系统
│   ├── text-area/      # 富文本编辑器 (支持Markdown)
│   ├── loading/        # 统一加载组件
│   ├── icon/           # 图标系统 (60+图标)
│   ├── source-list/    # 来源列表
│   └── weui/           # WeUI组件封装
├── behaviors/          # 10个行为模块
│   ├── baseBehavior.js         # 基础行为 (页面基础功能)
│   ├── authBehavior.js         # 认证行为 (登录状态管理)
│   ├── systemAdaptBehavior.js  # 系统适配 (设备适配)
│   ├── userBehavior.js         # 用户行为 (用户操作API)
│   ├── postBehavior.js         # 帖子行为 (帖子CRUD+互动)
│   ├── commentBehavior.js      # 评论行为 (评论管理)
│   ├── notificationBehavior.js # 通知行为 (消息管理)
│   ├── knowledgeBehavior.js    # 知识库行为 (搜索+洞察)
│   ├── agentBehavior.js        # 智能体行为 (RAG问答)
│   └── weuiBehavior.js         # WeUI行为 (UI组件支持)
├── utils/              # 工具库 (15+工具模块)
│   ├── apiClient.js    # API 客户端工厂
│   ├── storage.js      # 本地存储封装
│   ├── logger.js       # 日志系统
│   ├── ui.js           # UI 交互工具
│   ├── datetime.js     # 时间处理
│   ├── system.js       # 系统信息
│   ├── format.js       # 格式化工具
│   ├── http.js         # HTTP请求
│   └── index.js        # 统一导出
├── api/                # API 文档 (6个模块文档)
│   ├── wxapp/          # 小程序接口
│   ├── knowledge/      # 知识库接口  
│   └── agent/          # 智能体接口
└── icons/              # 图标资源 (60+图标文件)
```

## 核心功能模块

### 1. 用户系统
- **认证机制**: 微信授权登录 + openid管理
- **用户资料**: 头像、昵称、简介、联系方式 (微信/QQ/手机)
- **社交功能**: 关注/粉丝系统 (通过action/toggle接口)
- **权限体系**: 基于角色的权限控制

### 2. 帖子系统  
- **内容创作**: 富文本/Markdown双模式编辑器
- **分类体系**: 学习交流、校园生活、就业创业、社团活动、失物招领
- **互动机制**: 点赞、评论、收藏 (统一action/toggle接口)
- **多媒体支持**: 图片上传、链接解析
- **隐私控制**: 公开/匿名、评论开关、删除管理

### 3. 评论系统
- **多层级结构**: 支持回复特定评论
- **实时互动**: 点赞功能
- **权限管理**: 作者可删除评论
- **API细分**: 区分帖子评论/回复评论/用户评论

### 4. 搜索系统  
- **多类型检索**:
  - `@wiki` - RAG智能问答
  - `@knowledge` - 知识库搜索  
  - `@post` - 帖子内容搜索
  - `@user` - 用户搜索
- **搜索体验**: 历史记录、搜索建议
- **搜索前缀**: 可视化类型选择

### 5. 知识库系统
- **多源数据整合**:
  - 南开官网 (website_nku) - 官方信息
  - 微信公众号 (wechat_nku) - 动态资讯
  - 二手市场 (market_nku) - 交易信息
  - 用户创作 (wxapp_post) - 原创内容
- **智能检索**: 基于相关度排序
- **每日洞察**: 分析各平台数据趋势

### 6. RAG 智能问答
- **自然语言理解**: 支持校园相关问答
- **检索增强**: 基于知识库的答案生成
- **来源追溯**: 提供答案来源和相关链接
- **推荐机制**: 智能推荐相关问题

### 7. 通知系统
- **消息分类**: 点赞、评论、关注、收藏
- **状态管理**: 已读/未读、批量操作
- **实时提醒**: 未读消息计数

### 8. 发现系统
- **每日洞察**: 基于日期的智能分析
- **分类展示**: 官方动态、社区活动、集市交易
- **趋势分析**: 热门内容和数据统计

## 技术特色

### 1. 统一的API调用模式
```javascript
// 声明式API定义
const userApi = createApiClient('/api/wxapp/user', {
  profile: { method: 'GET', path: '/profile', params: { openid: true } },
  list: { method: 'GET', path: '/list', params: { page: false, page_size: false } }
});

// 在behavior中使用
async _getUserProfile(openid) {
  const res = await userApi.profile({ openid });
  return res.code === 200 ? res.data : null;
}
```

### 2. Behaviors状态管理
```javascript
// 页面中组合使用多个behavior
Page({
  behaviors: [
    behaviors.baseBehavior,      // 基础功能 
    behaviors.authBehavior,      # 认证管理
    behaviors.systemAdaptBehavior, // 设备适配
    behaviors.userBehavior       // 用户操作
  ]
});
```

### 3. 三层系统适配架构
- **全局层 (app.js)**: 胶囊按钮精确计算导航栏高度
- **Behavior层**: systemAdaptBehavior提供适配工具方法  
- **组件层**: nav-bar组件自动处理固定定位和占位

### 4. 组件化设计
- **高复用性**: 30+个可复用组件
- **统一接口**: 标准化的属性和事件设计
- **功能完整**: 从基础UI到复杂业务组件

## 数据流设计

### API接口规范
- **字段名一致性**: 前后端字段名严格一致，禁止转换
- **统一响应格式**: code/message/data/pagination标准结构
- **参数自动注入**: openid等通用参数自动处理

### 错误处理机制
- **分层处理**: API层/Behavior层/UI层三级错误处理
- **用户友好**: 统一的错误提示和加载状态
- **日志记录**: 完整的错误日志收集

### 性能优化策略
- **组件懒加载**: 按需引入组件
- **数据缓存**: 智能缓存策略
- **图片优化**: 压缩和懒加载
- **代码分包**: 优化包大小

## 开发工作流

### 1. 功能开发流程
1. 查阅 `api/` 目录中的接口文档
2. 在对应behavior中实现API调用逻辑
3. 复用或开发所需组件
4. 组装页面并测试功能
5. 处理错误和边界情况

### 2. 代码质量保证
- **统一工具库**: 通过utils避免重复造轮子
- **组件复用**: 优先使用现有组件
- **行为复用**: 通过behavior共享业务逻辑
- **规范约束**: 严格的编码和API调用规范

### 3. 设备兼容性
- **响应式设计**: 使用rpx单位适配不同屏幕
- **系统适配**: 自动处理状态栏和导航栏适配
- **交互优化**: 统一的加载状态和操作反馈

## 项目状态

### 当前版本特性
- ✅ 完整的用户认证和资料管理
- ✅ 富文本帖子发布和互动系统  
- ✅ 多类型搜索和智能问答
- ✅ 系统级设备适配方案
- ✅ 统一的API调用和错误处理
- ✅ 完善的组件库和工具集

### 技术债务清理
- ✅ API接口重构 (从45+接口精简到28个)
- ✅ 字段名规范统一
- ✅ 系统适配问题解决
- ✅ 组件复用率提升
- ✅ 代码质量和可维护性改进

## 部署与维护

### 开发环境
- **开发工具**: 微信开发者工具
- **版本控制**: Git + 分支管理
- **代码规范**: ESLint + 自定义规则

### 生产环境  
- **小程序发布**: 微信小程序管理后台
- **API服务**: 后端服务集群
- **监控体系**: 性能和错误监控

这个项目展现了现代微信小程序开发的最佳实践，在架构设计、代码质量、用户体验等方面都达到了较高水准。
