---
description: 
globs: 
alwaysApply: true
---
# 微信小程序Behavior开发规范

## Behavior设计原则

### 1. 单一职责原则
每个Behavior只负责一个特定功能领域，保持职责清晰和功能专一性。

### 2. 高内聚低耦合
- 设计独立性强的Behavior，避免Behavior间强依赖
- 通过参数传递实现Behavior间的数据交换
- 使用事件机制实现松耦合通信

### 3. 可复用性
- 提供通用的方法接口，支持不同场景复用
- 避免硬编码特定业务逻辑
- 通过配置参数支持不同使用方式

## 项目Behavior架构

项目中共有10个核心Behavior，按职责分类：

### 基础设施层
- **baseBehavior** - 页面基础功能 (生命周期、通用方法)
- **authBehavior** - 认证状态管理 (登录验证、权限控制)  
- **systemAdaptBehavior** - 系统适配 (设备信息、导航栏适配)
- **weuiBehavior** - WeUI组件支持

### 业务逻辑层
- **userBehavior** - 用户操作 (用户信息、关注功能)
- **postBehavior** - 帖子管理 (CRUD、互动、过滤)
- **commentBehavior** - 评论系统 (评论管理、回复功能)
- **notificationBehavior** - 通知管理 (消息处理、状态更新)

### 功能服务层
- **knowledgeBehavior** - 知识库操作 (搜索、洞察、历史)
- **agentBehavior** - 智能问答 (RAG对话、推荐问题)

## Behavior标准结构

```javascript
/**
 * [功能名称]行为 - [功能描述]
 */
const { createApiClient, logger, ui, ToastType } = require('../utils/index');

// 1. API客户端定义（如果需要API调用）
const apiClient = createApiClient('/api/base/path', {
  getData: { method: 'GET', path: '/data', params: { openid: true } },
  createData: { method: 'POST', path: '/create', params: { openid: true } }
});

module.exports = Behavior({
  // 2. 生命周期定义（可选）
  lifetimes: {
    created() {
      // Behavior实例创建时执行
    },
    attached() {
      // Behavior实例进入页面节点树时执行
    },
    ready() {
      // Behavior实例布局完成后执行
    },
    detached() {
      // Behavior实例从页面节点树移除时执行
      // 清理操作
    }
  },
  
  // 3. 页面生命周期（仅页面使用时有效）
  pageLifetimes: {
    show() {
      // 页面显示时执行
    },
    hide() {
      // 页面隐藏时执行
    },
    unload() {
      // 页面卸载时执行
      // 清理操作
    }
  },
  
  // 4. 数据定义（可选）
  data: {
    // 内部状态数据（使用_前缀避免渲染）
    _behaviorState: {},
    // 缓存数据
    _cache: {}
  },
  
  // 5. 数据监听器（可选）
  observers: {
    '_behaviorState.**': function(state) {
      // 监听内部状态变化
    }
  },
  
  // 6. 方法定义
  methods: {
    // ==================== 公共API方法 ====================
    /**
     * 获取数据列表
     * @param {Object} filter - 筛选条件
     * @param {number} page - 页码
     * @param {number} pageSize - 每页数量
     * @returns {Promise<Object>} API响应
     */
    async _getDataList(filter = {}, page = 1, pageSize = 10) {
      try {
        const params = { ...filter, page, page_size: pageSize };
        const res = await apiClient.getData(params);
        
        if (res.code !== 200) {
          throw new Error(res.message || '获取数据失败');
        }
        
        return this._formatListResponse(res);
      } catch (err) {
        logger.error('获取数据列表失败', { error: err, filter, page, pageSize });
        ui.showToast('获取数据失败，请重试', { type: ToastType.ERROR });
        throw err;
      }
    },
    
    /**
     * 创建数据
     * @param {Object} data - 数据对象
     * @returns {Promise<Object|null>} 创建结果
     */
    async _createData(data) {
      try {
        const res = await apiClient.createData(data);
        if (res.code !== 200) {
          throw new Error(res.message || '创建失败');
        }
        ui.showToast('创建成功', { type: ToastType.SUCCESS });
        return res.data;
      } catch (err) {
        logger.error('创建数据失败', { error: err, data });
        ui.showToast('创建失败，请重试', { type: ToastType.ERROR });
        return null;
      }
    },
    
    // ==================== 内部辅助方法 ====================
    /**
     * 格式化列表响应数据
     * @private
     */
    _formatListResponse(res) {
      return {
        data: res.data || [],
        pagination: res.pagination || {
          total: res.total || 0,
          page: res.page || 1,
          page_size: res.page_size || 10,
          total_pages: Math.ceil((res.total || 0) / (res.page_size || 10)),
          has_more: res.has_more !== undefined ? res.has_more : false
        }
      };
    },
    
    /**
     * 缓存管理
     * @private
     */
    _getCache(key) {
      return this.data._cache[key] || null;
    },
    
    _setCache(key, value) {
      const cache = { ...this.data._cache };
      cache[key] = value;
      this.setData({ '_cache': cache });
    },
    
    _clearCache() {
      this.setData({ '_cache': {} });
    }
  }
});
```

## API集成规范

### 1. API客户端定义
基于项目实际API结构定义客户端：

```javascript
// 用户相关API
const userApi = createApiClient('/api/wxapp/user', {
  profile: { method: 'GET', path: '/profile', params: { openid: true } },
  myProfile: { method: 'GET', path: '/my/profile', params: { openid: true } },
  update: { method: 'POST', path: '/update', params: { openid: true } },
  list: { method: 'GET', path: '/list', params: { page: false, page_size: false } }
});

// 帖子相关API  
const postApi = createApiClient('/api/wxapp/post', {
  list: { method: 'GET', path: '/list', params: { page: false, page_size: false } },
  detail: { method: 'GET', path: '/detail', params: { post_id: true } },
  create: { method: 'POST', path: '/create', params: { openid: true } },
  update: { method: 'POST', path: '/update', params: { post_id: true, openid: true } },
  delete: { method: 'POST', path: '/delete', params: { post_id: true, openid: true } }
});

// 通用动作API (点赞、收藏、关注等)
const actionApi = createApiClient('/api/wxapp/action', {
  toggle: { method: 'POST', path: '/toggle', params: { openid: true } }
});
```

### 2. 参数配置规范
```javascript
// 参数配置说明
const apiConfig = {
  methodName: {
    method: 'GET|POST',           // HTTP方法
    path: '/api/path',            // API路径
    params: {                     // 参数配置
      openid: true,               // 必填参数，自动注入
      post_id: true,              // 必填参数，调用时提供
      page: false,                // 可选参数
      page_size: false            // 可选参数
    }
  }
};
```

## 核心Behavior实现

### 1. userBehavior - 用户行为
```javascript
const userApi = createApiClient('/api/wxapp/user', {
  profile: { method: 'GET', path: '/profile', params: { openid: true } },
  myProfile: { method: 'GET', path: '/my/profile', params: { openid: true } },
  update: { method: 'POST', path: '/update', params: { openid: true } },
  list: { method: 'GET', path: '/list', params: { page: false, page_size: false } }
});

const actionApi = createApiClient('/api/wxapp/action', {
  toggle: { method: 'POST', path: '/toggle', params: { openid: true } }
});

module.exports = Behavior({
  methods: {
    // 获取用户信息
    async _getUserProfile(openid, current_openid = null) {
      try {
        const params = { openid };
        if (current_openid) params.current_openid = current_openid;
        
        const res = await userApi.profile(params);
        return res.code === 200 ? res.data : null;
      } catch (err) {
        logger.error('获取用户信息失败', { error: err, openid });
        return null;
      }
    },
    
    // 关注/取消关注
    async _toggleFollow(followed_id) {
      try {
        const res = await actionApi.toggle({
          action_type: 'follow',
          target_id: followed_id
        });
        
        if (res.code === 200) {
          ui.showToast(res.data.is_active ? '关注成功' : '取消关注', { type: ToastType.SUCCESS });
          return res.data;
        }
        return null;
      } catch (err) {
        logger.error('关注操作失败', { error: err, followed_id });
        ui.showToast('操作失败，请重试', { type: ToastType.ERROR });
        return null;
      }
    }
  }
});
```

### 2. postBehavior - 帖子行为
```javascript
const postApi = createApiClient('/api/wxapp/post', {
  list: { method: 'GET', path: '/list', params: { page: false, page_size: false } },
  detail: { method: 'GET', path: '/detail', params: { post_id: true } },
  create: { method: 'POST', path: '/create', params: { openid: true } },
  delete: { method: 'POST', path: '/delete', params: { post_id: true, openid: true } }
});

module.exports = Behavior({
  methods: {
    // 获取帖子列表
    async _getPostList(filter = {}) {
      try {
        const res = await postApi.list(filter);
        return res.code === 200 ? this._formatListResponse(res) : { data: [], pagination: {} };
      } catch (err) {
        logger.error('获取帖子列表失败', { error: err, filter });
        return { data: [], pagination: {} };
      }
    },
    
    // 点赞/取消点赞
    async _toggleLike(post_id) {
      try {
        const res = await actionApi.toggle({
          action_type: 'like',
          target_type: 'post',
          target_id: post_id
        });
        
        if (res.code === 200) {
          return res.data;
        }
        return null;
      } catch (err) {
        logger.error('点赞操作失败', { error: err, post_id });
        return null;
      }
    },
    
    // 收藏/取消收藏
    async _toggleFavorite(post_id) {
      try {
        const res = await actionApi.toggle({
          action_type: 'favorite',
          target_type: 'post',
          target_id: post_id
        });
        
        if (res.code === 200) {
          return res.data;
        }
        return null;
      } catch (err) {
        logger.error('收藏操作失败', { error: err, post_id });
        return null;
      }
    }
  }
});
```

### 3. systemAdaptBehavior - 系统适配
```javascript
const { getSystemInfo } = require('../utils/index');

module.exports = Behavior({
  data: {
    // 系统信息会自动从全局获取
    _systemInfo: null
  },
  
  lifetimes: {
    attached() {
      // 自动注入系统适配信息
      const systemInfo = getSystemInfo();
      this.setData({
        _systemInfo: systemInfo,
        statusBarHeight: systemInfo.statusBarHeight,
        navBarHeight: systemInfo.navBarHeight,
        totalNavHeight: systemInfo.totalNavHeight
      });
    }
  },
  
  methods: {
    // 获取适配样式
    getAdaptedStyle() {
      const { statusBarHeight, navBarHeight, totalNavHeight } = this.data;
      return {
        statusBarHeight: `${statusBarHeight}px`,
        navBarHeight: `${navBarHeight}px`,
        totalNavHeight: `${totalNavHeight}px`,
        contentTop: `${totalNavHeight}px`
      };
    },
    
    // 计算相对导航栏的位置
    calculatePositionFromNavBar(offset = 0) {
      const { totalNavHeight } = this.data;
      return `${totalNavHeight + offset}px`;
    }
  }
});
```

## 方法命名规范

### 1. 公共方法命名
- **获取数据**：`_getData`, `_getDataList`, `_getDataDetail`
- **创建数据**：`_createData`, `_addData`
- **更新数据**：`_updateData`, `_modifyData`
- **删除数据**：`_deleteData`, `_removeData`
- **状态切换**：`_toggleStatus`, `_toggleLike`, `_toggleFollow`

### 2. 私有方法命名
```javascript
methods: {
  // 格式化方法
  _formatData(data) {},
  _parseJsonFields(data) {},
  _formatListResponse(res) {},
  
  // 验证方法
  _validateParams(params) {},
  _checkPermission() {},
  
  // 缓存方法
  _getCache(key) {},
  _setCache(key, value) {},
  _clearCache() {},
  
  // 工具方法
  _buildParams(data) {},
  _handleError(err) {},
  _debounce(func, wait) {}
}
```

## 错误处理规范

### 1. 统一错误处理
```javascript
async _apiMethod(params) {
  try {
    const res = await apiClient.method(params);
    
    // 检查响应状态
    if (res.code !== 200) {
      throw new Error(res.message || '操作失败');
    }
    
    return res.data;
  } catch (err) {
    logger.error('API调用失败', { error: err, params, context: '_apiMethod' });
    
    // 根据错误类型决定处理方式
    if (err.message.includes('网络')) {
      ui.showToast('网络连接失败，请检查网络', { type: ToastType.ERROR });
      throw err;
    } else {
      ui.showToast('操作失败，请重试', { type: ToastType.ERROR });
      return null;
    }
  }
}
```

### 2. 错误分类处理
```javascript
_handleApiError(err, context = '', showToast = true) {
  const errorType = this._classifyError(err);
  
  let message = '操作失败，请重试';
  
  switch (errorType) {
    case 'network':
      message = '网络连接失败，请检查网络';
      break;
    case 'auth':
      message = '登录已过期，请重新登录';
      break;
    case 'permission':
      message = '权限不足';
      break;
    case 'validation':
      message = err.message || '参数验证失败';
      break;
  }
  
  logger.error(`${context} 失败`, { error: err, type: errorType });
  
  if (showToast) {
    ui.showToast(message, { type: ToastType.ERROR });
  }
  
  return { success: false, message, type: errorType };
}
```

## 数据管理规范

### 1. 状态数据定义
```javascript
data: {
  // 使用下划线前缀标识内部数据（不触发渲染）
  _loading: false,
  _error: null,
  _cache: {},
  _config: {},
  
  // 业务数据
  _dataList: [],
  _currentItem: null,
  _pagination: {
    page: 1,
    page_size: 10,
    total: 0,
    has_more: false
  }
}
```

### 2. 缓存管理
```javascript
methods: {
  // 智能缓存策略
  async _getCachedData(key, fetcher, ttl = 300000) { // 5分钟缓存
    const cached = this._getCache(key);
    
    if (cached && Date.now() - cached.timestamp < ttl) {
      logger.debug('使用缓存数据', { key });
      return cached.data;
    }
    
    try {
      const freshData = await fetcher();
      this._setCache(key, {
        data: freshData,
        timestamp: Date.now()
      });
      logger.debug('更新缓存数据', { key });
      return freshData;
    } catch (err) {
      // 如果获取失败且有缓存，返回缓存数据
      if (cached) {
        logger.warn('API失败，使用过期缓存', { key, error: err });
        return cached.data;
      }
      throw err;
    }
  }
}
```

## 生命周期管理

### 1. 资源初始化和清理
```javascript
lifetimes: {
  attached() {
    // 初始化配置
    this._initConfig();
    
    // 绑定事件监听
    this._bindEventListeners();
    
    // 初始化缓存
    this.setData({ '_cache': {} });
  },
  
  detached() {
    // 清理资源
    this._cleanup();
    
    // 移除事件监听
    this._unbindEventListeners();
    
    // 清理缓存
    this._clearCache();
  }
}
```

### 2. 页面生命周期处理
```javascript
pageLifetimes: {
  show() {
    // 页面显示时刷新数据
    this._refreshDataIfNeeded();
  },
  
  hide() {
    // 页面隐藏时保存状态
    this._saveCurrentState();
  },
  
  unload() {
    // 页面卸载时清理
    this._cleanup();
  }
}
```

## 性能优化技巧

### 1. 防抖和节流
```javascript
methods: {
  // 防抖处理
  _debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func.apply(this, args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  },
  
  // 节流处理
  _throttle(func, limit) {
    let inThrottle;
    return function executedFunction(...args) {
      if (!inThrottle) {
        func.apply(this, args);
        inThrottle = true;
        setTimeout(() => inThrottle = false, limit);
      }
    };
  }
}
```

### 2. 批量操作
```javascript
methods: {
  // 批量更新状态
  _batchUpdateState(updates) {
    const batchedUpdate = {};
    
    Object.keys(updates).forEach(key => {
      batchedUpdate[key] = updates[key];
    });
    
    this.setData(batchedUpdate);
  },
  
  // 批量API调用
  async _batchApiCall(requests) {
    try {
      const results = await Promise.all(requests);
      return results;
    } catch (err) {
      logger.error('批量API调用失败', { error: err, requests });
      throw err;
    }
  }
}
```

## 使用示例

### 1. 在页面中使用
```javascript
const behaviors = require('../../behaviors/index');

Page({
  behaviors: [
    behaviors.baseBehavior, 
    behaviors.authBehavior,
    behaviors.systemAdaptBehavior,  // 必须包含
    behaviors.userBehavior, 
    behaviors.postBehavior
  ],
  
  data: {
    userInfo: null,
    postList: []
  },
  
  async onLoad() {
    // 系统适配自动处理，不需要手动调用
    await this.loadData();
  },
  
  async loadData() {
    try {
      // 使用behavior方法
      const openid = this.getOpenID();
      const userInfo = await this._getUserProfile(openid);
      const postData = await this._getPostList({ author: openid });
      
      this.setData({ 
        userInfo,
        postList: postData.data 
      });
    } catch (err) {
      logger.error('加载数据失败', { error: err });
    }
  }
});
```

### 2. 在组件中使用
```javascript
const behaviors = require('../../behaviors/index');

Component({
  behaviors: [behaviors.baseBehavior, behaviors.postBehavior],
  
  properties: {
    postId: String
  },
  
  observers: {
    'postId': function(postId) {
      if (postId) {
        this.loadPostDetail(postId);
      }
    }
  },
  
  methods: {
    async loadPostDetail(postId) {
      const postDetail = await this._getPostDetail(postId);
      this.setData({ postDetail });
    },
    
    async onLike() {
      const result = await this._toggleLike(this.data.postDetail.id);
      if (result) {
        // 更新点赞状态
        this.setData({
          'postDetail.is_liked': result.is_active,
          'postDetail.like_count': result.count
        });
      }
    }
  }
});
```

## 最佳实践总结

1. **职责单一**：每个Behavior专注于特定功能领域
2. **接口统一**：使用一致的方法命名和参数格式
3. **错误处理**：提供完善的错误处理和用户反馈
4. **性能优化**：合理使用缓存、防抖、节流等技术
5. **系统适配**：所有页面必须包含systemAdaptBehavior
6. **API集成**：统一使用createApiClient进行API调用
7. **日志记录**：完善的日志记录便于问题排查
8. **用户体验**：操作反馈及时，错误提示友好

通过遵循这些规范，可以构建出高质量、易维护、性能优良的Behavior体系。
